const { Model, DataTypes } = require('sequelize');
const bcrypt = require('bcrypt');
const sequelize = require('../config/database');

class User extends Model {
  async validatePassword(password) {
    return bcrypt.compare(password, this.password);
  }

  // Get the next available auto-generated ID
  async getNextAutoId() {
    const pattern = /^(\d+)([A-Z])$/;
    const lastTile = await this.getTiles({
      where: {
        isAutoGenerated: true
      },
      order: [['id', 'DESC']],
      limit: 1
    });

    if (!lastTile || lastTile.length === 0) {
      return '0A';
    }

    const lastId = lastTile[0].tileId;
    const matches = lastId.match(pattern);

    if (!matches) {
      return '0A';
    }

    let [_, num, letter] = matches;
    num = parseInt(num);
    
    if (letter === 'Z') {
      return `${num + 1}A`;
    }
    
    return `${num}${String.fromCharCode(letter.charCodeAt(0) + 1)}`;
  }
}

User.init({
  id: {
    type: DataTypes.UUID,
    defaultValue: DataTypes.UUIDV4,
    primaryKey: true
  },
  email: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true,
    validate: {
      isEmail: true
    }
  },
  username: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true
  },
  password: {
    type: DataTypes.STRING,
    allowNull: false
  },
  lastAutoId: {
    type: DataTypes.STRING,
    defaultValue: '0A'
  }
}, {
  sequelize,
  modelName: 'User',
  hooks: {
    beforeCreate: async (user) => {
      const salt = await bcrypt.genSalt(10);
      user.password = await bcrypt.hash(user.password, salt);
    },
    beforeUpdate: async (user) => {
      if (user.changed('password')) {
        const salt = await bcrypt.genSalt(10);
        user.password = await bcrypt.hash(user.password, salt);
      }
    }
  }
});

module.exports = User;
