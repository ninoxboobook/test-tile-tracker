generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid()) @db.Uuid
  email       String        @unique @db.VarChar(255)
  username    String        @unique @db.VarChar(255)
  password    String        @db.VarChar(255)
  firstName   String?       @db.VarChar(255)
  lastName    String?       @db.VarChar(255)
  imageUrl    String?       @db.VarChar(255)
  lastAutoId  String?       @default("0A") @db.VarChar(255)
  createdAt   DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime      @updatedAt @db.Timestamptz(6)
  clayBodies  ClayBody[]
  decorations  Decoration[]
  testTiles   TestTile[]
  collections  Collection[]

  @@map("users")
}

model Collection {
  id          String                 @id @default(uuid()) @db.Uuid
  name        String                 @db.VarChar(255)
  description String?
  userId      String                 @db.Uuid
  createdAt   DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime               @updatedAt @db.Timestamptz(6)
  user        User                 @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  testTiles   TestTile[]

  @@map("collections")
}

model ClayBody {
  id                String               @id @default(uuid()) @db.Uuid
  name              String               @db.VarChar(255)
  type              String               @db.VarChar(255)
  manufacturer      String?              @db.VarChar(255)
  cone              String?              @db.VarChar(255)
  firingTemperature String?              @db.VarChar(255)
  texture           String?              @db.VarChar(255)
  plasticity        String?              @db.VarChar(255)
  colourOxidation  String?              @db.VarChar(255)
  colourReduction  String?              @db.VarChar(255)
  shrinkage         Float?               @db.Real
  absorption        Float?               @db.Real
  meshSize          Int?                 @db.Integer
  imageUrl          String?              @db.VarChar(255)
  notes             String?              @db.Text
  userId            String               @db.Uuid
  createdAt         DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime             @updatedAt @db.Timestamptz(6)
  user              User                @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  testTiles        TestTile[]

  @@map("clay_bodies")
  @@unique([userId, name], map: "clay_bodies_user_id_name")
  @@index([userId, type], map: "clay_bodies_user_id_type")
}

model Decoration {
  id                String                    @id @default(uuid()) @db.Uuid
  name              String                    @db.VarChar(255)
  category          String                    @db.VarChar(255)
  type              String                    @db.VarChar(255)
  manufacturer      String?                   @db.VarChar(255)
  cone              String?                   @db.VarChar(255)
  atmosphere        String?                   @db.VarChar(255)
  colour            String?                   @db.VarChar(255)
  surface           String?                   @db.VarChar(255)
  transparency      String?                   @db.VarChar(255)
  glazyUrl          String?                   @db.VarChar(255)
  imageUrl          String?                   @db.VarChar(255)
  recipe            String?                   @db.Text
  notes             String?                   @db.Text
  userId            String                    @db.Uuid
  createdAt         DateTime                  @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime                  @updatedAt @db.Timestamptz(6)
  user              User                     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  testTiles         TestTile[]

  @@map("decorations")
  @@unique([userId, name], map: "decorations_user_id_name")
  @@index([userId, type], map: "decorations_user_id_type")
}

model TestTile {
  id           String        @id @default(uuid()) @db.Uuid
  name         String        @db.VarChar(255)
  stamp        String?       @db.VarChar(255)
  notes        String?       @db.Text
  imageUrl     String?       @db.VarChar(255)
  createdAt    DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime      @updatedAt @db.Timestamptz(6)
  userId       String        @db.Uuid
  clayBodyId   String        @db.Uuid
  decorations  Decoration[]
  collections  Collection[]
  clayBody     ClayBody      @relation(fields: [clayBodyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user         User          @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("test_tiles")
}

model Session {
  sid    String   @id @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@map("sessions")
}

model UserSession {
  id        String   @id(map: "user_sessions_pkey") @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_sessions")
}