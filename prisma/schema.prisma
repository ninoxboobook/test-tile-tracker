generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id          String        @id @default(uuid()) @db.Uuid
  email       String        @unique @db.VarChar(255)
  username    String        @unique @db.VarChar(255)
  password    String        @db.VarChar(255)
  lastAutoId  String?       @default("0A") @db.VarChar(255)
  created_at   DateTime      @db.Timestamptz(6)
  updated_at   DateTime      @updatedAt @db.Timestamptz(6)
  clay_bodies  ClayBodies[]
  decorations  Decorations[]
  test_series  TestSeries[]
  test_tiles   TestTiles[]

  @@map("users")
}

model TestSeries {
  id          String                 @id @default(uuid()) @db.Uuid
  name        String                 @db.VarChar(255)
  description String?
  user_id      String                 @db.Uuid
  created_at   DateTime               @db.Timestamptz(6)
  updated_at   DateTime               @updatedAt @db.Timestamptz(6)
  variables   Json?
  goal        String?
  status      enum_TestSeries_status @default(planned)
  conclusions String?
  user        Users                  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  test_tiles   TestTiles[]

  @@map("test_series")
}

model ClayBodies {
  id                String               @id @default(uuid()) @db.Uuid
  name              String               @db.VarChar(255)
  type              enum_ClayBodies_type @default(Stoneware)
  description       String?
  cone_range         String?              @db.VarChar(255)
  user_id            String               @db.Uuid
  created_at         DateTime             @db.Timestamptz(6)
  updated_at         DateTime             @updatedAt @db.Timestamptz(6)
  manufacturer      String?              @db.VarChar(255)
  composition       Json?
  firing_temperature String?              @db.VarChar(255)
  cone              String?              @db.VarChar(255)
  plasticity        String?              @db.VarChar(255)
  texture           String?              @db.VarChar(255)
  colour_oxidation  String?              @db.VarChar(255)
  colour_reduction  String?              @db.VarChar(255)
  shrinkage         Float?               @db.Real
  absorption        Float?               @db.Real
  notes             String?              @db.Text
  user              Users                @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  test_tiles         TestTiles[]

  @@map("clay_bodies")
  @@unique([user_id, name], map: "clay_bodies_user_id_name")
  @@index([user_id, type], map: "clay_bodies_user_id_type")
}

model Decorations {
  id                String                    @id @default(uuid()) @db.Uuid
  name              String                    @db.VarChar(255)
  type              String                    @db.VarChar(255)
  description       String?
  user_id            String                    @db.Uuid
  created_at         DateTime                  @db.Timestamptz(6)
  updated_at         DateTime                  @updatedAt @db.Timestamptz(6)
  color             String?                   @db.VarChar(255)
  color_reaction     String?                   @db.VarChar(255)
  cone              String?                   @db.VarChar(255)
  firing_atmosphere  enum_Decorations_atmosphere?
  firing_temperature String?                   @db.VarChar(255)
  food_safe          Boolean?
  ingredients       Json?
  manufacturer      String?                   @db.VarChar(255)
  surface           String?                   @db.VarChar(255)
  transparency      String?                   @db.VarChar(255)
  user              Users                     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  test_tiles         TestTiles[]

  @@map("decorations")
  @@unique([user_id, name], map: "decorations_user_id_name")
  @@index([user_id, type], map: "decorations_user_id_type")
}

model TestTiles {
  id           String      @id @default(uuid()) @db.Uuid
  name         String      @db.VarChar(255)
  description  String?
  user_id       String      @db.Uuid
  clay_body_id   String      @db.Uuid
  decoration_id String?     @db.Uuid
  test_series_id String?     @db.Uuid
  created_at    DateTime    @db.Timestamptz(6)
  updated_at    DateTime    @updatedAt @db.Timestamptz(6)
  clay_body     ClayBodies  @relation(fields: [clay_body_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  decoration   Decorations? @relation(fields: [decoration_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  test_series   TestSeries? @relation(fields: [test_series_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user         Users       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("test_tiles")
}

model Session {
  sid    String   @id @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@map("sessions")
}

model UserSession {
  id        String   @id(map: "user_sessions_pkey") @default(uuid()) @db.Uuid
  user_id    String   @db.Uuid
  token     String   @unique
  expires_at DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("user_sessions")
}

enum enum_TestSeries_status {
  planned
  in_progress @map("in-progress")
  completed
  archived
}

enum enum_ClayBodies_type {
  Raku
  Earthenware
  Stoneware
  Bone_China @map("Bone China")
  Porcelain
  Wild
}

enum enum_Decorations_atmosphere {
  oxidation
  reduction
}

enum enum_Decorations_category {
  commercial
  studio
  formula
}

enum enum_Decorations_type {
  glaze
  slip
  underglaze
  oxide
  engobe
}
